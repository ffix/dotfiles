" curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
"     https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
" or
" curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
"     https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"

let s:nvim = has('nvim')
let s:vim8 = has('job') && has('patch-8.0.0027')
let s:newvim = s:nvim || s:vim8

let s:oni = exists("g:gui_oni")

call plug#begin()

if !s:oni
  if s:newvim
    Plug 'autozimu/LanguageClient-neovim', {
        \ 'branch': 'next',
        \ 'do': 'bash install.sh',
        \ }

    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
    let s:completer = 'deoplete'
  endif
  Plug 'junegunn/fzf.vim'
  Plug 'jiangmiao/auto-pairs'
  Plug 'tpope/vim-surround'
  Plug 'itchyny/lightline.vim'
  Plug 'morhetz/gruvbox'
endif


Plug 'tpope/vim-commentary'
Plug 'airblade/vim-gitgutter'
Plug 'airblade/vim-rooter'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'mbbill/undotree'
Plug 'majutsushi/tagbar'
Plug 'editorconfig/editorconfig-vim'
Plug 'vim-pandoc/vim-pandoc-syntax'
Plug 'tshirtman/vim-cython'

call plug#end()

let g:python_host_prog = '/usr/bin/python2'
let g:python3_host_prog = '/usr/bin/python3'

if !s:oni
    " Required for operations modifying multiple buffers like rename.
    set hidden

    let g:LanguageClient_serverCommands = {
        \ 'python': ['/usr/bin/pyls'],
        \ 'cpp': ['/usr/bin/ccls'],
        \ }

    nnoremap <F5> :call LanguageClient_contextMenu()<CR>
    " Or map each action separately
    nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
    nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
    nnoremap <silent> <F3> :call LanguageClient#textDocument_rename()<CR>

    " Always draw sign column. Prevent buffer moving when adding/deleting sign.
    set signcolumn=yes
endif

let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']

if exists('s:completer')
  if s:completer == "deoplete"
    let g:deoplete#enable_at_startup = 1

    inoremap <silent><expr> <TAB>
    \ pumvisible() ? "\<C-n>" :
    \ <SID>check_back_space() ? "\<TAB>" :
    \ deoplete#mappings#manual_complete()
    function! s:check_back_space() abort "{{{
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
    endfunction"}}}
  endif
endif

"Credit joshdick
"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if (empty($TMUX))
  if (has("nvim"))
  "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
  if (has("termguicolors"))
    set termguicolors
  endif
endif

if !s:oni
  " TODO: add more terms
  if $TERM == 'xterm-termite' || $TERM_REAL == 'alacritty'
    let g:gruvbox_italic=1
  endif

  colorscheme gruvbox
  set background=dark

  let g:lightline = {
  \    'colorscheme': 'gruvbox',
  \    'active': {
  \      'left':[ [ 'mode', 'paste'  ],
  \               [ 'gitbranch', 'readonly', 'filename', 'modified'  ]
  \      ]
  \    },
  \      'component': {
  \        'lineinfo': ' %3l:%-2v',
  \      },
  \    'component_function': {
  \      'gitbranch': 'fugitive#head',
  \    },
  \    'separator': {
  \      'left': '', 'right': ''
  \    },
  \    'subseparator': {
  \      'left': '', 'right': ''
  \    },
  \    'tabline' : {
  \        'left': [ ['tabs'] ],
  \        'right': [ ['close'] ]
  \    }
  \}
  set laststatus=2
  set showtabline=2
  set guioptions-=e
endif


"indent
set shiftwidth=4
set expandtab
set smarttab
set tabstop=4

"backspace
set bs=2

"search
set hlsearch
" search for visually hightlighted text
vnoremap <c-f> y<ESC>/<c-r>"<CR>

"Clear highlighting on escape in normal mode
nnoremap <esc> :noh<return><esc>
nnoremap <esc>^[ <esc>^[

"disable timeout
set ttimeoutlen=0

"line numbers
set number

"highlight chars
set listchars=tab:▸▸,trail:¬,nbsp:.,extends:❯,precedes:❮
set list

"set <leader>
let mapleader=","

"map keys
nmap ; :reg<cr>

"enable mouse
set mouse=nvc

"open vimrc
if s:nvim
  nnoremap <leader>v :e  ~/.config/nvim/init.vim<CR>
  nnoremap <leader>V :tabnew  ~/.config/nvim/init.vim<CR>
else
  nnoremap <leader>v :e  ~/.vimrc<CR>
  nnoremap <leader>V :tabnew  ~/.vimrc<CR>
endif

"use tab to switch between open windows
nnoremap <Tab> <C-w>
nnoremap <Tab><Tab> <C-w><C-w>

nmap <silent> <C-Up> :wincmd k<CR>
nmap <silent> <C-Down> :wincmd j<CR>
nmap <silent> <C-Left> :wincmd h<CR>
nmap <silent> <C-Right> :wincmd l<CR>

nmap <silent> <C-S-Up> :wincmd +<CR>
nmap <silent> <C-S-Down> :wincmd -<CR>
nmap <silent> <C-S-Left> :wincmd <<CR>
nmap <silent> <C-S-Right> :wincmd ><CR>

"copy/paste system clipboard
nnoremap <Bslash> "+p
vnoremap <Bslash> "+y

"make space in normal mode add space
nnoremap <Space> i<Space><Esc>l

"fzf
nnoremap <C-b> :History<CR>
nnoremap <C-p> :Files<CR>

if executable('fd')
    let $FZF_DEFAULT_COMMAND='fd --type f'
elseif executable('rg')
    let $FZF_DEFAULT_COMMAND='rg --files'
elseif executable('ag')
    let $FZF_DEFAULT_COMMAND='ag -g ""'
endif

":UndotreeToggle
nnoremap <F6> :UndotreeToggle<cr>

"tagbar
nmap <F8> :TagbarToggle<CR>

"paste mode toggle
set pastetoggle=<F2>

"Persistent undo
set undofile                " Save undo's after file closes
set undodir=$HOME/.vim/undo " where to save undo histories
set undolevels=1000         " How many undos
set undoreload=10000        " number of lines to save for undo

"General file runners for various languages
function! LangRunner()
  if(&ft=="python")
    vnoremap <leader>pp :! autopep8 --max-line-length 120 -<CR>
    nnoremap <leader>pp :%! autopep8 --max-line-length 120 -<CR>
    vnoremap <leader>pi :! isort -m3 -tc -e -<CR>
    nnoremap <leader>pi :%! isort -m3 -tc -e -<CR>
    vnoremap <leader>py :! yapf --style=pep8<CR>
    nnoremap <leader>py :%! yapf --style=pep8<CR>
    nnoremap <leader>d  oimport pdb; pdb.set_trace()<Esc>
    nnoremap <leader>D  Oimport pdb; pdb.set_trace()<Esc>
  elseif(&ft=="cpp")
    vnoremap <leader>pp :! clang-format -assume-filename some.cpp<CR>
    nnoremap <leader>pp :%! clang-format -assume-filename some.cpp<CR>
  elseif(&ft=="proto")
    vnoremap <leader>pp :! clang-format -assume-filename some.proto<CR>
    nnoremap <leader>pp :%! clang-format -assume-filename some.proto<CR>
  endif
endfunction

" set default maps to nop
vnoremap <leader>pp :echo 'Nothing to do!'<CR>
nnoremap <leader>pp :echo 'Nothing to do!'<CR>
vnoremap <leader>pi :echo 'Nothing to do!'<CR>
nnoremap <leader>pi :echo 'Nothing to do!'<CR>
vnoremap <leader>py :echo 'Nothing to do!'<CR>
nnoremap <leader>py :echo 'Nothing to do!'<CR>
nnoremap <leader>d  :echo 'Nothing to do!'<CR>
nnoremap <leader>D  :echo 'Nothing to do!'<CR>
" set language-specific maps
au BufEnter * call LangRunner()

" spell
set spell spelllang=en_us,ru

" disable entering Ex mode
map q: <Nop>
nnoremap Q <nop>

" qwerty-йцукен partial suppory
map ё `
map й q
map ц w
map у e
map к r
map е t
map н y
map г u
map ш i
map щ o
map з p
map х [
map ъ ]
map ф a
map ы s
map в d
map а f
map п g
map р h
map о j
map л k
map д l
map ж ;
map э '
map я z
map ч x
map с c
map м v
map и b
map т n
map ь m
map б ,
map ю .
map Ё ~
map Й Q
map Ц W
map У E
map К R
map Е T
map Н Y
map Г U
map Ш I
map Щ O
map З P
map Х {
map Ъ }
map Ф A
map Ы S
map В D
map А F
map П G
map Р H
map О J
map Л K
map Д L
map Ж :
map Э "
map Я Z
map Ч X
map С C
map М V
map И B
map Т N
map Ь M
map Б <
map Ю >

" set window title
let my_asciictrl = nr2char(127)
let my_unisubst = "␡"
for i in range(1, 31)
  let my_asciictrl .= nr2char(i)
  let my_unisubst  .= nr2char(0x2400 + i, 1)
endfor
augroup termTitle
  au!
  autocmd BufEnter * let &titlestring = "vim " . tr(expand("%:t"), my_asciictrl, my_unisubst)
  autocmd BufEnter * set title
augroup END
