" curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
"     https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
" or
" curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
"     https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

call plug#begin()

"function! BuildYCM(info)
"  " info is a dictionary with 3 fields
"  " - name:   name of the plugin
"  " - status: 'installed', 'updated', or 'unchanged'
"  " - force:  set on PlugInstall! or PlugUpdate!
"  if a:info.status == 'installed' || a:info.force
"    !./install.py
"  endif
"endfunction


"if has("python") || has("python3")
"  if has("patch-7.4-1579") || has("nvim")
"    Plug 'Valloric/YouCompleteMe', { 'do': function('BuildYCM') }
"  endif
"endif
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif

Plug 'zchee/deoplete-jedi'



Plug 'davidhalter/jedi-vim'


Plug 'neomake/neomake'
Plug 'alfredodeza/coveragepy.vim'

Plug 'kien/ctrlp.vim'

Plug 'flazz/vim-colorschemes'
"Plugin 'tpope/vim-commentary'
Plug 'scrooloose/nerdcommenter'

Plug 'airblade/vim-gitgutter'
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-surround'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'matze/vim-move'
"Airline
Plug 'bling/vim-airline'
Plug 'tpope/vim-fugitive'

Plug 'mileszs/ack.vim'

Plug 'tpope/vim-repeat'

"Highlight
Plug 'digitaltoad/vim-jade'

"Undo tree
Plug 'mbbill/undotree'

Plug 'majutsushi/tagbar'

Plug 'mhinz/vim-startify'

Plug 'iCyMind/NeoSolarized'
Plug 'morhetz/gruvbox'

"cyrillic commands support
"Plug 'lyokha/vim-xkbswitch'
"
" pandoc
" Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-pandoc/vim-pandoc-syntax'

call plug#end()

let g:python_host_prog = '/usr/bin/python2'
let g:python3_host_prog = '/usr/bin/python3'

let g:deoplete#enable_at_startup = 1

inoremap <silent><expr> <TAB>
\ pumvisible() ? "\<C-n>" :
\ <SID>check_back_space() ? "\<TAB>" :
\ deoplete#mappings#manual_complete()
function! s:check_back_space() abort "{{{
let col = col('.') - 1
return !col || getline('.')[col - 1]  =~ '\s'
endfunction"}}}

let g:jedi#auto_vim_configuration = 0
let g:jedi#use_tabs_not_buffers = 0
let g:jedi#completions_enabled = 0
let g:jedi#smart_auto_mappings = 0

let g:jedi#goto_command = "<leader>g"
let g:jedi#goto_assignments_command = "<leader>gg"

"Credit joshdick
"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if (empty($TMUX))
  if (has("nvim"))
  "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
  if (has("termguicolors"))
    set termguicolors
  endif
endif


set laststatus=2

" TODO: add more terms
if $TERM == 'xterm-termite'
  let g:gruvbox_italic=1
endif

colorscheme gruvbox
set background=dark


"indent
set shiftwidth=4
set expandtab
set smarttab
set tabstop=4

"backspace
set bs=2

"search
set hlsearch
" search for visually hightlighted text
vnoremap <c-f> y<ESC>/<c-r>"<CR>

"Clear highlighting on escape in normal mode
nnoremap <esc> :noh<return><esc>
nnoremap <esc>^[ <esc>^[

"disable timeout
set ttimeoutlen=0

"line numbers
set number

"highlight chars
set listchars=tab:▸▸,trail:¬,nbsp:.,extends:❯,precedes:❮
set list

"set <leader>
let mapleader=","

"map keys
nmap ; :reg<cr>

"airline
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#tab_nr_type = 1

"syntactic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

"neomake
call neomake#configure#automake('nw', 750)
"call neomake#configure#automake({
"\ 'TextChanged': {},
"\ 'InsertLeave': {},
"\ 'BufWritePost': {'delay': 0},
"\ 'BufWinEnter': {},
"\ }, 500)

"autocmd! BufWritePost * Neomake
"autocmd! BufUnload * ccl | lcl
"
let g:neomake_open_list=2

"enable mouse
set mouse=nvc

"open vimrc
nnoremap <leader>v :e  ~/.config/nvim/init.vim<CR>
nnoremap <leader>V :tabnew  ~/.config/nvim/init.vim<CR>

"use tab to switch between open windows
nnoremap <Tab> <C-w>
nnoremap <Tab><Tab> <C-w><C-w>

"c-left/right
"nnoremap <C-Left> :tabprevious<CR>
"nnoremap <C-Right> :tabnext<CR>

nmap <silent> <C-Up> :wincmd k<CR>
nmap <silent> <C-Down> :wincmd j<CR>
nmap <silent> <C-Left> :wincmd h<CR>
nmap <silent> <C-Right> :wincmd l<CR>

nmap <silent> <C-S-Up> :wincmd +<CR>
nmap <silent> <C-S-Down> :wincmd -<CR>
nmap <silent> <C-S-Left> :wincmd <<CR>
nmap <silent> <C-S-Right> :wincmd ><CR>

"make enter break and do newlines
"nnoremap <CR> O<Esc>j

"copy/paste system clipboard
nnoremap <Bslash> "+p
vnoremap <Bslash> "+y

"line break
nnoremap K i<CR><Esc>

"make space in normal mode add space
nnoremap <Space> i<Space><Esc>l

"Ack

if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

":Ag on selected word
nnoremap <leader>ag :Ack <C-R><C-W><CR>
nnoremap <leader>a :Ack <C-R><C-W><CR>

"MRU
nnoremap <C-b> :CtrlPMRU<CR>

":UndotreeToggle
nnoremap <F6> :UndotreeToggle<cr>

"YCM
map <F3> :YcmCompleter GoTo<CR>
map <F4> :YcmCompleter GoToReferences<CR>
map <F5> :YcmCompleter GetDoc<CR>
let g:ycm_autoclose_preview_window_after_insertion = 1

"tagbar
nmap <F8> :TagbarToggle<CR>

"paste mode toggle
set pastetoggle=<F2>

"Persistent undo
set undofile                " Save undo's after file closes
set undodir=$HOME/.vim/undo " where to save undo histories
set undolevels=1000         " How many undos
set undoreload=10000        " number of lines to save for undo

"General file runners for various languages
function! LangRunner()
  if(&ft=="python")
    vnoremap <leader>pp :! autopep8 --max-line-length 120 -<CR>
    nnoremap <leader>pp :%! autopep8 --max-line-length 120 -<CR>
    vnoremap <leader>pi :! isort -m3 -tc -e -<CR>
    nnoremap <leader>pi :%! isort -m3 -tc -e -<CR>
    vnoremap <leader>py :! yapf --style=pep8<CR>
    nnoremap <leader>py :%! yapf --style=pep8<CR>
    nnoremap <leader>d  oimport pdb; pdb.set_trace()<Esc>
    nnoremap <leader>D  Oimport pdb; pdb.set_trace()<Esc>
  elseif(&ft=="ruby")
    "
  endif
endfunction

au BufEnter * call LangRunner()

" spell
set spell spelllang=en_us,ru

" qwerty-йцукен partial suppory
map ё `
map й q
map ц w
map у e
map к r
map е t
map н y
map г u
map ш i
map щ o
map з p
map х [
map ъ ]
map ф a
map ы s
map в d
map а f
map п g
map р h
map о j
map л k
map д l
map ж ;
map э '
map я z
map ч x
map с c
map м v
map и b
map т n
map ь m
map б ,
map ю .
map Ё ~
map Й Q
map Ц W
map У E
map К R
map Е T
map Н Y
map Г U
map Ш I
map Щ O
map З P
map Х {
map Ъ }
map Ф A
map Ы S
map В D
map А F
map П G
map Р H
map О J
map Л K
map Д L
map Ж :
map Э "
map Я Z
map Ч X
map С C
map М V
map И B
map Т N
map Ь M
map Б <
map Ю >
